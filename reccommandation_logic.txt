def recommend_movies_based_on_booking_history(user):
    """
    Recommend movies to the user based on booking history and genre diversity.
    Logic:
    1. Find movies the user has booked.
    2. Identify genres of those movies.
    3. Recommend movies from the same genres.
    4. If no recommendations are found, fallback to popular movies across all genres.
    """
    # Step 1: Get movie ids and genres booked by current user
    user_booked_movies = Booking.objects.filter(user=user).select_related('movie')
    user_booked_movie_ids = user_booked_movies.values_list('movie_id', flat=True)
    user_genres = user_booked_movies.values_list('movie__genres', flat=True).distinct()

    if not user_booked_movie_ids:
        # If user has no bookings, recommend some popular movies
        return retrieve_popular_movies()
    
    # Step 2: Recommend movies from the same genres
    recommended_movies = Movie.objects.filter(
        genres__in=user_genres
    ).exclude(
        id__in=user_booked_movie_ids
    ).annotate(
        popularity=Count('booking')
    ).order_by('-popularity')

    if recommended_movies.exists():
        return recommended_movies

    # Step 3: Fallback to popular movies across all genres
    return retrieve_popular_movies()

def retrieve_popular_movies():
    """
    Retrieve popular movies based on total bookings across all genres.
    """
    return Movie.objects.annotate(
        booking_count=Count('booking')
    ).order_by('-booking_count')[:10]
